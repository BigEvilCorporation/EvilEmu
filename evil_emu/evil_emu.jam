SubDir bigevilcorp evil_emu ;

SubInclude bigevilcorp evil_emu resource : resource ;

ion_renderer_opts ?= fixed ;
ion_audio_engine ?= sdl2 ;
ion_online_engine ?= none ;
evil_emu_config ?= file ;

ApplyIonCompiler evil_emu ;
ApplyIonDefines evil_emu ;
ApplyIonIncludes evil_emu ;
ApplyIonCore evil_emu ;
ApplyIonIo evil_emu ;
ApplyIonInput evil_emu ;
ApplyIonAudio evil_emu ;
ApplyIonRenderer evil_emu : opengl ;
ApplyIonGui evil_emu ;
ApplyIonGameKit evil_emu ;

local SRC = 
	debugger/DebuggerUI.cpp
	debugger/DebuggerUI.h
	megaex/audio/lj_ym2612.cpp
	megaex/audio/lj_ym2612.h
	megaex/audio/psg.cpp
	megaex/audio/psg.h
	megaex/cpu/m68k/cpu.cpp
	megaex/cpu/m68k/cpu.h
	megaex/cpu/m68k/cpu_dis.cpp
	megaex/cpu/m68k/cpu_dis.h
	megaex/cpu/m68k/cpu_ops.inl
	megaex/cpu/m68k/cpu_ops.cpp
	megaex/cpu/m68k/cpu_ops.h
	megaex/cpu/z80/z80.cpp
	megaex/cpu/z80/z80.h
	megaex/cpu/z80/z80_dis.cpp
	megaex/cpu/z80/z80_dis.h
	megaex/cpu/z80/z80_ops.cpp
	megaex/cpu/z80/z80_ops.h
	megaex/gui/debugger.cpp
	megaex/gui/debugger.h
	megaex/gui/font.h
	megaex/callbacks.h
	megaex/config.h
	megaex/emulator.cpp
	megaex/emulator.h
	megaex/emuthread.cpp
	megaex/emuthread.h
	megaex/globals.h
	megaex/memory.cpp
	megaex/memory.h
	megaex/memory.inl
	megaex/mgaudio.cpp
	megaex/mgaudio.h
	megaex/mgmain.cpp
	megaex/mytypes.h
	megaex/platform.h
	megaex/vdp/vdp.cpp
	megaex/vdp/vdp.h
	menu/MenuGamepad.cpp
	menu/MenuGamepad.h
	menu/MenuKeyboard.cpp
	menu/MenuKeyboard.h
	menu/MenuManual.cpp
	menu/MenuManual.h
	menu/MenuSaveSlots.cpp
	menu/MenuSaveSlots.h
	menu/MenuSettings.cpp
	menu/MenuSettings.h
	menu/MenuVideo.cpp
	menu/MenuVideo.h
	menu/DlgROMDisclaimer.cpp
	menu/DlgROMDisclaimer.h
	roms/include_rom.h
	roms/include_vars.h
	states/StateGame.cpp
	states/StateGame.h
	states/StatePause.cpp
	states/StatePause.h
	achievements.cpp
	achievements.h
	constants.h
	savegame.cpp
	savegame.h
	settings.h
	evil_emu.cpp
	evil_emu.h
	main.cpp
	memwatch.cpp
	memwatch.h
	;

# No TTY console in release builds
CONSOLE_OPTION = windows ;

if ( debug in $(CONFIG) )
{
	CONSOLE_OPTION = console ;
}

if ( ( win32 in $(PLATFORM) ) | ( win64 in $(PLATFORM) ) )
{
	SRC += resource/resource.res ;
}

# Online/distribution
if ( steam in $(ion_online_engine) )
{
	echo Using Steam distribution ;
	ApplyIonOnline evil_emu ;
	C.Defines evil_emu : EVIL_EMU_DISTRIBUTION=1 ;
}
else if ( itch in $(ion_online_engine) )
{
	echo Using Itch distribution ;
	C.Defines evil_emu : EVIL_EMU_DISTRIBUTION=2 ;
}
else if ( galaxy in $(ion_online_engine) )
{
	echo Using GOG distribution ;
	ApplyIonOnline evil_emu ;
	C.Defines evil_emu : EVIL_EMU_DISTRIBUTION=3 ;
}
else
{
	echo Not building for any particular distribution method ;
	C.Defines evil_emu : EVIL_EMU_DISTRIBUTION=0 ;
}

# Game build type
if ( demo in $(evil_emu_config) )
{
	echo Building Demo ;
	C.Defines evil_emu : EVIL_EMU_GAME_TYPE=0 ;
}
else if ( final in $(evil_emu_config) )
{
	echo Building Final ;
	C.Defines evil_emu : EVIL_EMU_GAME_TYPE=1 ;
}
else if ( autotest in $(evil_emu_config) )
{
	echo Building Final ;
	C.Defines evil_emu : EVIL_EMU_GAME_TYPE=2 ;
}
else if ( file in $(evil_emu_config) )
{
	echo Building Final ;
	C.Defines evil_emu : EVIL_EMU_GAME_TYPE=3 ;
}

# ApplyResources evil_emu : $(SRC) ;

C.IncludeDirectories evil_emu : . ;
C.IncludeDirectories evil_emu : megaex ;

AutoSourceGroup evil_emu : $(SRC) ;
C.RuntimeType evil_emu : static ;
C.Application evil_emu : $(SRC) : $(CONSOLE_OPTION) ;
